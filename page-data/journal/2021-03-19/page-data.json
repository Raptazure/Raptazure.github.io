{"componentChunkName":"component---src-templates-journal-tsx","path":"/journal/2021-03-19/","result":{"data":{"site":{"siteMetadata":{"title":"Raptazure","description":"魔法の森","author":{"name":"raptazure","twitter":"https://twitter.com/raptazure","github":"https://github.com/raptazure"}}},"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"layout\": \"journal\",\n  \"title\": \"\",\n  \"date\": \"2021-03-19T00:00:00.000Z\",\n  \"tags\": [\"journal\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Relational Algebra Basics\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The select operation selects tuples that satisfy a given predicate. In general, we allow comparisons using =, \\u2260, <, \\u2264, >, and \\u2265 in the selection pred- icate. Furthermore, we can combine several predicates into a larger predicate by using the connectives and (\\u2227), or (\\u2228), and not (\\xAC).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The project operation is a unary operation that returns its argument relation, with certain attributes left out. Since a relation is a set, any duplicate rows are eliminated. We list those attributes that we wish to appear in the result as a subscript to \\u03A0. The argument relation follows in parentheses. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The Cartesian-product operation, denoted by a cross (\\xD7), allows us to combine information from any two relations.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The join operation allows us to combine a selection and a Cartesian product into a single operation. Consider relations r(R) and s(S), and let \\u03B8 be a predicate on attributes in the schema R \\u222A S. The join operation \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"r \\u22C8\\u03B8 s\"), \" is defined as follows: \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"r \\u22C8\\u03B8 s = \\u03C3\\u03B8(r \\xD7 s)\"), \".\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Relational Algebra Basics The select operation selects tuples that satisfy a given predicate. In general, we allow comparisons using…","fields":{"lang":"zh-Hans"},"frontmatter":{"title":"","date":"2021-03-19","tags":["journal"]}}},"pageContext":{"slug":"/journal/2021-03-19/"}},"staticQueryHashes":["2345487092"]}