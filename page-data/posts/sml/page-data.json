{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/sml/","result":{"data":{"site":{"siteMetadata":{"title":"Raptazure","description":"魔法の森","author":{"name":"raptazure","twitter":"https://twitter.com/raptazure","github":"https://github.com/raptazure"}}},"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Standard ML\",\n  \"date\": \"2020-09-16T00:00:00.000Z\",\n  \"tags\": [\"PL\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"ML Variable Bindings and Expressions\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"sml\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-sml\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sml\"\n  }), \"val z = 3;\\n(* static environment: z : int *)\\n(* dynamic environment: z --> 3 *)\\n\\nval w = z + 1;\\n(* static environment: z : int, w : int *)\\n(* dynamic environment: z --> 3, w --> 4 *)\"))), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The semantics\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Syntax is just how you write something\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Semantics is what something means\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Type-checking (before program runs)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Evaluation (as program runs)\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For variable bindings:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Type-check expression and extend static environment \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Evaluate expression and extend dynamic environment\")))), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Rules for expressions:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Every kind of expression has:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Syntax \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Type-checking rules. Produce a type or fails.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Evaluation rules (used only on things that type-check).\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"Produce a value (or exception or infinite-loop).\")))), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Reasons for shadowing:\")), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"sml\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-sml\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sml\"\n  }), \"val a = 1\\nval b = a (* b is bound to 1 *)\\nval a = 2\"))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Expressions in variable bindings are evaluated \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"eagerly\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Before the variable binding finishes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Afterwards, the expression producing the value is irrelevant\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There is no way to assign to a variable in ML\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Can only shadow in a later environment  \")))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"ML Variable Bindings and Expressions The semantics Syntax is just how you write something Semantics is what something means Type-checking…","fields":{"lang":"zh-Hans"},"frontmatter":{"title":"Standard ML","date":"2020-09-16","tags":["PL"]}}},"pageContext":{"slug":"/posts/sml/"}},"staticQueryHashes":["2345487092"]}