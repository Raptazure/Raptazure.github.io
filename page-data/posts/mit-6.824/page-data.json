{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/mit-6.824/","result":{"data":{"site":{"siteMetadata":{"title":"Raptazure","description":"朝の祈り","author":{"name":"raptazure","twitter":"https://twitter.com/raptazure","github":"https://github.com/raptazure"}}},"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"MIT 6.824 - Distributed Systems\",\n  \"date\": \"2020-08-22T00:00:00.000Z\",\n  \"tags\": [\"computer science\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Introduction\"), mdx(\"h3\", null, \"1. Why distributed systems?\"), mdx(\"p\", null, \"Parallelism, fault tolerance, physical reasons, security / isolated\"), mdx(\"h3\", null, \"2. Basic challenges\"), mdx(\"p\", null, \"Concurrency, partial failure, performance\"), mdx(\"h3\", null, \"3. Fault tolerance tools\"), mdx(\"p\", null, \"non-volatile storage (expensive)\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"replication (make replicas have independent failure probability)\"), mdx(\"h3\", null, \"4. Consistency\"), mdx(\"p\", null, \"Strong consistency is expensive to implement.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"To avoid communication as much as possible particularly if replicas are far away, pepole build weak systems that might allow the stale read of an old value.\"), mdx(\"h3\", null, \"5. MapReduce\"), mdx(\"p\", null, \"The MapReduce algorithm contains two important tasks, namely Map and Reduce. Map takes a set of data and converts it into another set of data, where individual elements are broken down into tuples (key/value pairs). Secondly, reduce task, which takes the output from a map as an input and combines those data tuples into a smaller set of tuples. As the sequence of the name MapReduce implies, the reduce task is always performed after the map job. The entire job is made up of a bunch of map tasks and a bunch of reduce tasks. Example: word count.\"), mdx(\"h1\", null, \"RPC and Threads\"), mdx(\"h3\", null, \"1. Damage that comes with thread\"), mdx(\"p\", null, \"Race: solutions - figure out some locking strategy for making access to the data one thread at a time or not share data.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Coordination: solutions - channels, conditional variables, wait groups\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Deadlock: a state in which each member of a group is waiting for another member, including itself, to take action, such as sending a message or more commonly releasing a lock.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Introduction 1. Why distributed systems? Parallelism, fault tolerance, physical reasons, security / isolated 2. Basic challenges Concurrency…","fields":{"lang":"zh-Hans"},"frontmatter":{"title":"MIT 6.824 - Distributed Systems","date":"2020-08-22","tags":["computer science"]}}},"pageContext":{"slug":"/posts/mit-6.824/"}},"staticQueryHashes":["2345487092"]}